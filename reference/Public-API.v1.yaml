openapi: 3.0.0
info:
  title: Public API
  version: '1.0'
  description: ''
servers:
  - url: 'https://api.saryno.com/'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/User.v1.yaml
        description: ''
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /users/@me:
    get:
      summary: Get Current User
      tags:
        - '@me'
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/User.v1.yaml
      operationId: get-users-@me
      description: ''
    patch:
      summary: Modify current User
      tags:
        - '@me'
        - users
      responses: {}
      operationId: patch-users-@me
  /users/@me/communities:
    get:
      summary: Get Current User Communities
      tags:
        - '@me'
        - users
        - communities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/PartialCommunity.v1.yaml
      operationId: get-users-@me-communities
      description: Returns a list of Partial Community
  /users/@me/channels:
    post:
      summary: Create DM
      tags:
        - users
        - channels
        - dm
      responses:
        '200':
          description: Channel Created OR Found
          content:
            application/json:
              schema:
                $ref: ../models/DMChannel.v1.yaml
      operationId: post-users-@me-channels
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/DMChannel.v1.yaml
        description: The Channel to Create
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      description: ''
security:
  - Authorization: []
